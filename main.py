# 1. Напишите программу, удаляющую из текста все слова содержащие "абв".
# Используйте знания с последней лекции. Выполните ее в виде функции.


my_text = 'абвгдеж рабав копыто фабв Абкн абрыволк аБволк'
# print(my_text)
def del_words(my_text):
    my_text = list(filter(lambda i: 'абв' not in i, my_text.split()))
    return " ".join(my_text)
# print(del_words(my_text))

# Вы когда - нибудь играли в игру "Крестики-нолики"? Попробуйте создать её, причем
# чтобы сыграть в нее можно было в одиночку.



# 3. Вот вам текст:
# «Ну, вышел я, короче, из подъезда. В общем, короче говоря, шел я, кажется,
# в магазин. Ну,эээ, в общем, было лето, кажется. Как бы тепло. Солнечно, короче.
# Иду я, иду, в общем, по улице, а тут, короче, яма. Я, эээээ…. Упал в нее.
# И снова вышел, короче, из подъезда. Ясен пень, в магазин. В общем, лето на дворе, жарко,
# солнечно, птицы, короче, летают. Кстати, иду я по улице, иду, а тут, короче, яма.
# Ну, я в нее упал, в общем. Вышел из подъезда, короче. Лето на дворе, ясен пень.
# Птицы поют, короче, солнечно. В общем, в магазин мне надо. Что-то явно не так, короче.
# «Рекурсия», - подумал я. Ээээ...короче, в общем, пошел другой дорогой и не упал в эту… ээээ… яму.
# Хлеба купил».
# Отфильтруйте его, чтобы эту фигню можно было прочесть. Предусмотрите вариант,
# что мусорные слова могли быть написаны без использования запятых.

my_text = 'Ну, вышел я, короче, из подъезда. В общем, короче говоря, шел я, кажется, в магазин. Ну,эээ, в общем, было лето, кажется. Как бы тепло. Солнечно, короче. Иду я, иду, в общем, по улице, а тут, короче, яма. Я, эээээ…. Упал в нее. И снова вышел, короче, из подъезда. Ясен пень, в магазин. В общем, лето на дворе, жарко, солнечно, птицы, короче, летают. Кстати, иду я по улице, иду, а тут, короче, яма. Ну, я в нее упал, в общем. Вышел из подъезда, короче. Лето на дворе, ясен пень. Птицы поют, короче, солнечно. В общем, в магазин мне надо. Что-то явно не так, короче. «Рекурсия», - подумал я. Ээээ...короче, в общем, пошел другой дорогой и не упал в эту… ээээ… яму. Хлеба купил'
text = [', короче,', 'короче', ' говоря,', 'эээ', 'эээ...короче', 'эээ,', 'Ну,эээ,', 'ээ…', 'в общем,', 'Ну,', 'Я,', ' .']

# print(my_text)

def change_text(my_text, text):
    my_text = my_text.split()

    for word in my_text:
        if word in text:
            my_text.remove(word)
    my_text = ' '.join(my_text)

    for word in text:
        my_text = my_text.replace(word, '')
        if word == ' .':
            my_text = my_text.replace(word, '.')

    my_text = my_text.split()
    my_text[0] = my_text[0].replace('вышел', 'Вышел')
    my_text = ' '.join(my_text)
    return my_text


# print(change_text(my_text, text))


# 4. Чисто для тренировки новыx функций, ничего сложного.
# Создайте два списка — один с названиями языков программирования,
# другой — с числами от 1 до длины первого плюс 1. Вам нужно сделать две функции:
# первая из которых создаст список кортежей, состоящих из номера и языка, написанного большими буквами.
# Вторая — которая отфильтрует этот список следующим образом: если сумма очков слова имеет в делителях номер,
# с которым она в паре в кортеже, то кортеж остается, его номер заменяется на сумму очков. Если нет — удаляется.
# Суммой очков называется сложение порядковых номеров букв в слове.
# Порядковые номера смотрите в этой таблице, в третьем столбце: https://www.charset.org/utf-8
# Это — 16-ричная система, поищите, как правильнее и быстрее получать эти символы. С помощью reduce
# сложите получившиеся числа и верните из функции в качестве ответа.


my_list = ['Python', 'C#', 'Java', 'JavaScript', 'C++']
print(my_list)
my_nums = [1, 2, 3, 4, 5]


def create_tuple(my_nums, my_list):
    for i in range(len(my_list)):
        my_list[i] = my_list[i].upper()
    my_tuple = list(zip(my_nums, my_list))
    return my_tuple
print(create_tuple(my_nums, my_list))


